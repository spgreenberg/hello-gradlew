---
name: Production
on:
  push:
    branches:
    - main
    paths:
    - production-version.txt
  workflow_run:
    workflows:
    - Promote
    types:
    - completed
  workflow_dispatch: null
jobs:
  deploy:
    name: Deploy to production
    runs-on: ubuntu-latest
    env:
      REGISTRY: us-central1-docker.pkg.dev/skylounge-common/skylounge-registry
    steps:
    - name: Checkout branch
      uses: actions/checkout@v3
    - name: Set image and service name
      run: |
        deploy_sha=$(cat production-version.txt | xargs)
        image_name="${IMAGE_NAME}:${deploy_sha}"
        sed -i -e 's%${IMAGE_NAME}%'"$image_name"'%g' ./service.yaml
        sed -i -e 's%${GCP_PROJECT}%'"$GCP_PROJECT"'%g' ./service.yaml
      env:
        IMAGE_NAME: "${{env.REGISTRY}}/${{github.event.repository.name}}"
        GCP_PROJECT: skylounge-io
    - id: auth
      name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v0
      with:
        credentials_json: "${{ secrets.GOOGLE_CREDENTIALS_PROD }}"
    - id: deploy
      uses: google-github-actions/deploy-cloudrun@v0
      with:
        metadata: ./service.yaml
  configure-access:
    needs: deploy
    name: Map Domain
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: public-skylounge-library/terraform/gcp/cloud-run/domain-mapping
    steps:
    - name: Checkout terraform
      uses: actions/checkout@v3
      with:
        repository: sky-lounge/public-skylounge-library
        ref: main
        path: public-skylounge-library
    - uses: hashicorp/setup-terraform@v2
    - id: auth
      name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v0
      with:
        credentials_json: "${{ secrets.GOOGLE_CREDENTIALS_PROD }}"
    - name: Prepare Backend Config
      run: |
        cat << EOF > config.gcs.tfbackend
        bucket = "$TF_STATE_BUCKET"
        prefix = "${REPO_NAME}"
        EOF
      env:
        TF_STATE_BUCKET: tfstate.skylounge.io
        REPO_NAME: "${{ github.event.repository.name }}"
    - name: Terraform Init
      run: terraform init -backend-config=config.gcs.tfbackend
    - name: Prepare Terraform Vars File
      run: |
        echo "gcp_project = \"$GCP_PROJECT\"" > terraform.tfvars
        echo "dns_zone_name = \"$DNS_ZONE_NAME\"" >> terraform.tfvars
        echo "cloud_run_domain = \"$CLOUD_RUN_DOMAIN\"" >> terraform.tfvars
        echo "cloud_run_location = \"$CLOUD_RUN_LOCATION\"" >> terraform.tfvars
        echo "cloud_run_service_name = \"$CLOUD_RUN_SERVICE_NAME\"" >> terraform.tfvars
        if [ -n "$CLOUD_RUN_INVOKER" ]; then
          echo "cloud_run_invoker = \"$CLOUD_RUN_INVOKER\"" >> terraform.tfvars
        fi
      env:
        GCP_PROJECT: skylounge-io
        DNS_ZONE_NAME: skyloungeio
        CLOUD_RUN_DOMAIN: spgreenberg-hello.skylounge.io
        CLOUD_RUN_LOCATION: us-central1
        CLOUD_RUN_SERVICE_NAME: "${{ github.event.repository.name }}"
        CLOUD_RUN_INVOKER: allUsers
    - name: Terraform Apply
      run: terraform apply -auto-approve
